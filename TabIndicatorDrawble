package com.fooww.soft.android.FoowwCollege.view.indicator;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.PixelFormat;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.view.View;
import android.widget.TextView;

import com.fooww.soft.android.Presentation.R;
import com.fooww.soft.android.Utility.DisplayUtil;

import java.lang.reflect.Field;

/**
 * Created by ggg on 2018/5/5.
 */
public class TabIndicatorDrawble extends Drawable {
    private View view;
    private Paint paint;

    private static final int INDICATOR_HEIGHT = 16;

    private int length;

    public TabIndicatorDrawble(View view) {
        this.view = view;
//        length=DisplayUtil.dip2px(view.getContext(),10);
        this.paint = new Paint();
        paint.setColor(ContextCompat.getColor(view.getContext(), R.color.blue_text));

    }

    @Override
    public void draw(@NonNull Canvas canvas) {


        int mIndicatorLeft = getIntValue("mIndicatorLeft");
        int mIndicatorRight = getIntValue("mIndicatorRight");
        int INDICATOR_MARGIN=((mIndicatorRight-mIndicatorLeft)-DisplayUtil.dip2px(view.getContext
                (),21))/2;

        int radius = 10;
        if (mIndicatorLeft >= 0 && mIndicatorRight > mIndicatorLeft) {
            canvas.drawRoundRect(new RectF(mIndicatorLeft + INDICATOR_MARGIN, view.getHeight()
                    - INDICATOR_HEIGHT, mIndicatorRight - INDICATOR_MARGIN
                    , view.getHeight()), radius, radius, paint);
        }
    }

    private int getIntValue(String name) {
        try {
            Field field = view.getClass().getDeclaredField(name);
            field.setAccessible(true);
            Object o = field.get(view);
            return (Integer) o;

        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return 0;
    }

    @Override
    public void setAlpha(int alpha) {

    }

    @Override
    public void setColorFilter(@Nullable ColorFilter colorFilter) {

    }

    @Override
    public int getOpacity() {
        return PixelFormat.UNKNOWN;
    }
}
